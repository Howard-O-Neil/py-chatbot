#!/bin/sh

### BEGIN INIT INFO
# Provides:
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start daemon at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO

# FIXME: Run as user.
user="root"

name="flask-skeleton"
pid_file="/opt/flask-skeleton/var/run/$name.pid"
stdout_log="/opt/flask-skeleton/var/log/$name.log"
stderr_log="/opt/flask-skeleton/var/log/$name.err"


# Some of the gunicorn/configobj configuration depend on relative
# paths, so set the working directory to look like development.
dir="/opt/flask-skeleton"

cmd="$dir/bin/gunicorn -p $dir/var/run/gunicorn.pid -c $dir/config/gunicorn.py flaskskeleton:app"

get_pid() {
    cat "$pid_file"
}

get_gunicorn_pid() {
    cat "$dir/var/run/gunicorn.pid"
}

is_running() {
    [ -f "$pid_file" ] && ps `get_pid` > /dev/null 2>&1
}

case "$1" in
    start)
    if is_running; then
        echo "[init.d] Already started"
    else
        echo "[init.d] Starting $name"
        cd "$dir"
        if [ -z "$user" ]; then
            sudo -E $cmd >> "$stdout_log" 2>> "$stderr_log" &
        else
            sudo -E -u "$user" $cmd >> "$stdout_log" 2>> "$stderr_log" &
        fi
        echo $! > "$pid_file"
        if ! is_running; then
            echo "[init.d] Unable to start, see $stdout_log and $stderr_log"
            exit 1
        fi
    fi
    ;;
    stop)
    if is_running; then
        echo -n "[init.d] Stopping $name.."
        kill `get_pid`
	kill `get_gunicorn_pid`
        for i in {1..10}
        do
            if ! is_running; then
                break
            fi

            echo -n "."
            sleep 1
        done
        echo

        if is_running; then
            echo "[init.d] Not stopped; may still be shutting down or shutdown may have failed"
            exit 1
        else
            echo "[init.d] Stopped"
            if [ -f "$pid_file" ]; then
                rm "$pid_file"
            fi
        fi
    else
        echo "[init.d] Not running"
    fi
    ;;
    restart)
    $0 stop
    if is_running; then
        echo "[init.d] Unable to stop, will not attempt to start"
        exit 1
    fi
    $0 start
    ;;
    status)
    if is_running; then
        echo "[init.d] Running"
    else
        echo "[init.d] Stopped"
        exit 1
    fi
    ;;
    *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
    ;;
esac

exit 0
